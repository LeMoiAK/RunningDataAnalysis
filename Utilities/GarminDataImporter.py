# -*- coding: utf-8 -*-
"""
GarminDataImporter class
Class containing all functions and properties to import all the data from a Garmin
personal data request. This contains activities, heart and sleep data, Race Predictor, etc.

Created on Sat Jun 17 23:18:42 2023

@author: LeMoiAK
"""

#%% Required modules
from Utilities.ActivityImporter import ActivityImporter
import Utilities.Functions as Utils
import pandas as pd
import glob
import json
import datetime

#%% GarminDataImporter class
class GarminDataImporter:
    """
    This class imports data from all files contained within the folder of data provided by Garmin.
    """
    
    def __init__(self, folderPath):
        """
        Contructor. Give path to the root of the Garmin data folder as input
        """
        
        # Save folder for us in other methods
        self.rootFolder = folderPath
        
        # Loads the user profile like name and age
        self.importUserProfile()
        
        # Load Performance Metrics
        self.importPerformanceMetrics()
        
    
    
    #%% Data Import method
    def importUserProfile(self):
        """
        Imports the user profile and makes somes calculations like age and unit conversions
        """
        userFolder = self.rootFolder + "\\DI_CONNECT\\DI-Connect-User"
        with open(userFolder + '\\user_profile.json', 'r') as f:
            self.userProfile = json.load(f)
        self.userProfile['weight'] = self.userProfile['weight'] / 1e3 # Weight saved in g
        self.userProfile['height'] = self.userProfile['height'] / 1e2 # Height saved in cm
        self.userProfile['birthDate'] = datetime.datetime.strptime(self.userProfile['birthDate'], '%Y-%m-%d')
        self.userProfile['age'] = Utils.getAge(self.userProfile['birthDate'])
        
        # Add the Heart Rate Zones and handedness
        with open(userFolder + '\\user_settings.json', 'r') as f:
            userSettings = json.load(f)
        self.userProfile['handedness'] = userSettings['handedness']
        self.userProfile['heartRateZones'] = userSettings['heartRateZones'][0]
    
    def importPerformanceMetrics(self):
        """
        Function to import the performance metrics generated by Garmin.
        This is mainly the race pace prediction and the VO2 max estimation.
        """
        
        # Create folder name and find files in it corresponding to each category
        performanceMetricsFolder = self.rootFolder + "\\DI_CONNECT\\DI-Connect-Metrics"
        listRacePredictorFiles = glob.glob(performanceMetricsFolder + "\\RunRacePredictions_*.json")
        listMetricsFiles = glob.glob(performanceMetricsFolder + "\\MetricsMaxMetData_*.json")
        
        # Load Race Predictions
        dfs = [] # an empty list to store the data frames
        for file in listRacePredictorFiles:
            data = pd.read_json(file, lines=False) # read data frame from json file
            dfs.append(data) # append the data frame to the list

        self.df_RacePred = pd.concat(dfs, ignore_index=True) # concatenate all the data frames in the list.
        self.df_RacePred.set_index('timestamp', inplace=True)
        self.df_RacePred.sort_values('timestamp', inplace=True)
        
        self.df_RacePred['raceTime5K_DT'] = pd.to_datetime(self.df_RacePred['raceTime5K'], unit='s')
        self.df_RacePred['raceTime10K_DT'] = pd.to_datetime(self.df_RacePred['raceTime10K'], unit='s')
        self.df_RacePred['raceTimeHalf_DT'] = pd.to_datetime(self.df_RacePred['raceTimeHalf'], unit='s')
        self.df_RacePred['raceTimeMarathon_DT'] = pd.to_datetime(self.df_RacePred['raceTimeMarathon'], unit='s')

        self.df_RacePred['raceTime5K_Pace'] = Utils.speedToPace(5.0e3 / self.df_RacePred['raceTime5K'])
        self.df_RacePred['raceTime10K_Pace'] = Utils.speedToPace(10.0e3 / self.df_RacePred['raceTime10K'])
        self.df_RacePred['raceTimeHalf_Pace'] = Utils.speedToPace(21.0975e3 / self.df_RacePred['raceTimeHalf'])
        self.df_RacePred['raceTimeMarathon_Pace'] = Utils.speedToPace(42.195e3 / self.df_RacePred['raceTimeMarathon'])
        
        # Load VO2 max estimation and max MET (less discrete)
        dfs = [] # an empty list to store the data frames
        for file in listMetricsFiles:
            data = pd.read_json(file, lines=False) # read data frame from json file
            dfs.append(data) # append the data frame to the list

        self.df_MetVO2 = pd.concat(dfs, ignore_index=True) # concatenate all the data frames in the list.
        self.df_MetVO2.set_index('updateTimestamp', inplace=True)
        self.df_MetVO2.sort_values('updateTimestamp', inplace=True)
